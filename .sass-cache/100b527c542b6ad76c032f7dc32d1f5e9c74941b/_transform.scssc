3.1.19 (Brainy Betty)
b275670dbda9a1e1d3d991a86dcf7e19f28e0ea0
o:Sass::Tree::RootNode
:@template"ÑH@import "shared";

// @doc off
// Note ----------------------------------------------------------------------
// Safari, Chrome, and Firefox all support 3D transforms. However,
// only in the most recent builds. You should also provide fallback 2d support for
// Opera and IE. IE10 is slated to have 3d enabled, but is currently unreleased.
// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
// to switch between the two support lists. The toggle defaults to 'false' (2D),
// and also accepts 'true' (3D). Currently the lists are as follows:
// 2D: Mozilla, Webkit, Opera, Official
// 3D: Webkit, Firefox.

// Available Transforms ------------------------------------------------------
// - Scale (2d and 3d)
// - Rotate (2d and 3d)
// - Translate (2d and 3d)
// - Skew (2d only)

// Transform Parameters ------------------------------------------------------
// - Transform Origin (2d and 3d)
// - Perspective (3d)
// - Perspective Origin (3d)
// - Transform Style (3d)
// - Backface Visibility (3d)

// Mixins --------------------------------------------------------------------
// transform-origin
//  - shortcuts:  transform-origin2d, transform-origin3d
//  - helpers:    apply-origin
// transform
//  - shortcuts:  transform2d, transform3d
//  - helpers:    simple-transform, create-transform
// perspective
//  - helpers:    perspective-origin
// transform-style
// backface-visibility
// scale
//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
// rotate
//  - shortcuts:  rotateX, rotateY, rotate3d
// translate
//  - shortcuts:  translateX, translateY, translateZ, translate3d
// skew
//  - shortcuts:  skewX, skewY

// Defaults ------------------------------------------------------------------
// @doc on

// The default x-origin for transforms
$default-origin-x    : 50%                   !default;
// The default y-origin for transforms
$default-origin-y    : 50%                   !default;
// The default z-origin for transforms
$default-origin-z    : 50%                   !default;


// The default x-multiplier for scaling
$default-scale-x     : 1.25                  !default;
// The default y-multiplier for scaling
$default-scale-y     : $default-scale-x      !default;
// The default z-multiplier for scaling
$default-scale-z     : $default-scale-x      !default;


// The default angle for rotations
$default-rotate      : 45deg                 !default;


// The default x-vector for the axis of 3d rotations
$default-vector-x    : 1                     !default;
// The default y-vector for the axis of 3d rotations
$default-vector-y    : 1                     !default;
// The default z-vector for the axis of 3d rotations
$default-vector-z    : 1                     !default;


// The default x-length for translations
$default-translate-x : 1em                   !default;
// The default y-length for translations
$default-translate-y : $default-translate-x  !default;
// The default z-length for translations
$default-translate-z : $default-translate-x  !default;


// The default x-angle for skewing
$default-skew-x      : 5deg                  !default;
// The default y-angle for skewing
$default-skew-y      : 5deg                  !default;


// **Transform-origin**
// Transform-origin sent as a complete string
//
//     @include apply-origin( origin [, 3D-only ] )
//
// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
// in percentages, absolute (px, cm, in, em etc..) or relative
// (left, top, right, bottom, center) units
//
// @param only3d Set this to true to only apply this
// mixin where browsers have 3D support.
@mixin apply-origin($origin, $only3d) {
  $only3d: $only3d or -compass-list-size(-compass-list($origin)) > 2;
  @if $only3d {
    @include experimental(transform-origin, $origin,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform-origin, $origin,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Transform-origin sent as individual arguments:
//
//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
//
// where the 3 'origin-' arguments represent x/y/z coordinates.
//
// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support
@mixin transform-origin(
  $origin-x: $default-origin-x,
  $origin-y: $default-origin-y,
  $origin-z: false,
  $only3d:   if($origin-z, true, false)
) {
  $origin: unquote('');
  @if $origin-x or $origin-y or $origin-z {
    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }
    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}
    @if $origin-z { $origin: $origin $origin-z; }
    @include apply-origin($origin, $only3d);
  }
}


// Transform sent as a complete string:
//
//     @include transform( transforms [, 3D-only ] )
//
// where 'transforms' is a space separated list of all the transforms to be applied
@mixin transform(
  $transform,
  $only3d: false
) {
  @if $only3d {
    @include experimental(transform, $transform,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform, $transform,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Shortcut to target all browsers with 2D transform support
@mixin transform2d($trans) {
  @include transform($trans, false);
}

// Shortcut to target only browsers with 3D transform support
@mixin transform3d($trans) {
  @include transform($trans, true);
}

// @doc off
// 3D Parameters -------------------------------------------------------------
// @doc on

// Set the perspective of 3D transforms on the children of an element:
//
//      @include perspective( perspective )
//
// where 'perspective' is a uniless number representing the depth of the z-axis
// the higher the perspective, the more exagerated the foreshortening.
// values from 500 to 1000 are more-or-less "normal" - a good starting-point.
@mixin perspective($p) {
  @include experimental(perspective, $p,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Set the origin position for the perspective
//
//      @include perspective-origin(origin-x [origin-y])
//
// where the two arguments represent x/y coordinates
@mixin perspective-origin($origin: 50%) {
  @include experimental(perspective-origin, $origin,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine whether a 3D objects children also live in the given 3D space
//
//      @include transform-style( [ style ] )
//
// where `style` can be either `flat` or `preserve-3d`
// browsers default to `flat`, mixin defaults to `preserve-3d`
@mixin transform-style($style: preserve-3d) {
  @include experimental(transform-style, $style,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine the visibility of an element when it's back is turned
//
//     @include backface-visibility( [ visibility ] )
//
// where `visibility` can be either `visible` or `hidden`
// browsers default to visible, mixin defaults to hidden
@mixin backface-visibility($visibility: hidden) {
  @include experimental(backface-visibility, $visibility,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// @doc off
// Transform Partials --------------------------------------------------------
// These work well on their own, but they don't add to each other, they override.
// Use along with transform parameter mixins to adjust origin, perspective and style
// ---------------------------------------------------------------------------


// Scale ---------------------------------------------------------------------
// @doc on

// Scale an object along the x and y axis:
//
//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
//
// where the 'scale-' arguments are unitless multipliers of the x and y dimensions
// and perspective, which works the same as the stand-alone perspective property/mixin
// but applies to the individual element (multiplied with any parent perspective)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale(
  $scale-x:     $default-scale-x,
  $scale-y:     $scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scale($scale-x, $scale-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the x axis
// @include scaleX( [ scale-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleX(
  $scale:       $default-scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleX($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the y axis
// @include scaleY( [ scale-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleY(
  $scale:       $default-scale-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleY($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the z axis
// @include scaleZ( [ scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleZ(
  $scale: $default-scale-z,
  $perspective: false
) {
  $trans: scaleZ($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Scale and object along all three axis
// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale3d(
  $scale-x:     $default-scale-x,
  $scale-y:     $default-scale-y,
  $scale-z:     $default-scale-z,
  $perspective: false
) {
  $trans: scale3d($scale-x, $scale-y, $scale-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Rotate --------------------------------------------------------------------
// @doc on

// Rotate an object around the z axis  (2D)
// @include rotate( [ rotation, perspective, 3D-only ] )
// where 'rotation' is an angle set in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  $trans: rotate($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// A longcut for 'rotate' in case you forget that 'z' is implied
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateZ(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  @include rotate($rotate, $perspective, $only3d);
}

// Rotate an object around the x axis (3D)
// @include rotateX( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateX(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateX($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around the y axis (3D)
// @include rotate( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateY(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateY($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around an arbitrary axis (3D)
// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
// where the 'vector-' arguments accept unitless numbers
// these numbers are not important on their own, but in relation to one another
// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate3d(
  $vector-x: $default-vector-x,
  $vector-y: $default-vector-y,
  $vector-z: $default-vector-z,
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Translate -----------------------------------------------------------------
// @doc on

// Move an object along the x or y axis (2D)
// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translate($translate-x, $translate-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the x axis (2D)
// @include translate( [ translate-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateX(
  $trans-x:     $default-translate-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateX($trans-x);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the y axis (2D)
// @include translate( [ translate-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateY(
  $trans-y:     $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateY($trans-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the z axis (3D)
// @include translate( [ translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateZ(
  $trans-z:     $default-translate-z,
  $perspective: false
) {
  $trans: translateZ($trans-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Move an object along the x, y and z axis (3D)
// @include translate( [ translate-x, translate-y, translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate3d(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $translate-z: $default-translate-z,
  $perspective: false
) {
  $trans: translate3d($translate-x, $translate-y, $translate-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Skew ----------------------------------------------------------------------
// @doc on

// Skew an element:
//
//     @include skew( [ skew-x, skew-y, 3D-only ] )
//
// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skew(
  $skew-x: $default-skew-x,
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skew($skew-x, $skew-y);
  @include transform($trans, $only3d);
}

// Skew an element along the x axiz
//
//     @include skew( [ skew-x, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewX(
  $skew-x: $default-skew-x,
  $only3d: false
) {
  $trans: skewX($skew-x);
  @include transform($trans, $only3d);
}

// Skew an element along the y axis
//
//     @include skew( [ skew-y, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewY(
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skewY($skew-y);
  @include transform($trans, $only3d);
}


// Full transform mixins
// For settings any combination of transforms as arguments
// These are complex and not highly recommended for daily use
// They are mainly here for backwards-compatability purposes
//
// * they include origin adjustments
// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin create-transform(
  $perspective: false,
  $scale-x:     false,
  $scale-y:     false,
  $scale-z:     false,
  $rotate-x:    false,
  $rotate-y:    false,
  $rotate-z:    false,
  $rotate3d:    false,
  $trans-x:     false,
  $trans-y:     false,
  $trans-z:     false,
  $skew-x:      false,
  $skew-y:      false,
  $origin-x:    false,
  $origin-y:    false,
  $origin-z:    false,
  $only3d:      false
) {
  $trans: unquote("");

  // perspective
  @if $perspective { $trans: perspective($perspective) ; }

  // scale
  @if $scale-x and $scale-y {
    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }
    @else { $trans: $trans scale($scale-x, $scale-y); }
  } @else {
    @if $scale-x { $trans: $trans scaleX($scale-x); }
    @if $scale-y { $trans: $trans scaleY($scale-y); }
    @if $scale-z { $trans: $trans scaleZ($scale-z); }
  }

  // rotate
  @if $rotate-x { $trans: $trans rotateX($rotate-x); }
  @if $rotate-y { $trans: $trans rotateY($rotate-y); }
  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }
  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }

  // translate
  @if $trans-x and $trans-y {
    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }
    @else { $trans: $trans translate($trans-x, $trans-y); }
  } @else {
    @if $trans-x { $trans: $trans translateX($trans-x); }
    @if $trans-y { $trans: $trans translateY($trans-y); }
    @if $trans-z { $trans: $trans translateZ($trans-z); }
  }

  // skew
  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }
  @else {
    @if $skew-x { $trans: $trans skewX($skew-x); }
    @if $skew-y { $trans: $trans skewY($skew-y); }
  }

  // apply it!
  @include transform($trans, $only3d);
  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);
}


// A simplified set of options
// backwards-compatible with the previous version of the 'transform' mixin
@mixin simple-transform(
  $scale:    false,
  $rotate:   false,
  $trans-x:  false,
  $trans-y:  false,
  $skew-x:   false,
  $skew-y:   false,
  $origin-x: false,
  $origin-y: false
) {
  @include create-transform(
    false,
    $scale, $scale, false,
    false, false, $rotate, false,
    $trans-x, $trans-y, false,
    $skew-x, $skew-y,
    $origin-x, $origin-y, false,
    false
  );
}
:
@linei:@options{ :@has_childrenT:@children[io:Sass::Tree::ImportNode
;0;i;@:@imported_filename"shared;
[ o:Sass::Tree::CommentNode:@silenti :@value["p/* @doc off
 * Note ----------------------------------------------------------------------
 * Safari, Chrome, and Firefox all support 3D transforms. However,
 * only in the most recent builds. You should also provide fallback 2d support for
 * Opera and IE. IE10 is slated to have 3d enabled, but is currently unreleased.
 * To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
 * to switch between the two support lists. The toggle defaults to 'false' (2D),
 * and also accepts 'true' (3D). Currently the lists are as follows:
 * 2D: Mozilla, Webkit, Opera, Official
 * 3D: Webkit, Firefox. */;i;@:
@loud0;
[ o;;i ;["¯/* Available Transforms ------------------------------------------------------
 * - Scale (2d and 3d)
 * - Rotate (2d and 3d)
 * - Translate (2d and 3d)
 * - Skew (2d only) */;i;@;0;
[ o;;i ;["Þ/* Transform Parameters ------------------------------------------------------
 * - Transform Origin (2d and 3d)
 * - Perspective (3d)
 * - Perspective Origin (3d)
 * - Transform Style (3d)
 * - Backface Visibility (3d) */;i;@;0;
[ o;;i ;["p/* Mixins --------------------------------------------------------------------
 * transform-origin
 *  - shortcuts:  transform-origin2d, transform-origin3d
 *  - helpers:    apply-origin
 * transform
 *  - shortcuts:  transform2d, transform3d
 *  - helpers:    simple-transform, create-transform
 * perspective
 *  - helpers:    perspective-origin
 * transform-style
 * backface-visibility
 * scale
 *  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
 * rotate
 *  - shortcuts:  rotateX, rotateY, rotate3d
 * translate
 *  - shortcuts:  translateX, translateY, translateZ, translate3d
 * skew
 *  - shortcuts:  skewX, skewY */;i ;@;0;
[ o;;i ;["a/* Defaults ------------------------------------------------------------------
 * @doc on */;i4;@;0;
[ o;;i ;["./* The default x-origin for transforms */;i7;@;0;
[ o:Sass::Tree::VariableNode;i8;@:@guarded"!default:
@name"default-origin-x:
@expro:Sass::Script::Number:@numerator_units["%;i7:@original"50%;i8;@:@denominator_units[ ;
[ o;;i ;["./* The default y-origin for transforms */;i9;@;0;
[ o;;i:;@;"!default;"default-origin-y;o;;["%;i7;"50%;i:;@;[ ;
[ o;;i ;["./* The default z-origin for transforms */;i;;@;0;
[ o;;i<;@;"!default;"default-origin-z;o;;["%;i7;"50%;i<;@;[ ;
[ o;;i ;["//* The default x-multiplier for scaling */;i?;@;0;
[ o;;i@;@;"!default;"default-scale-x;o;;[ ;f	1.25;"	1.25;i@;@;[ ;
[ o;;i ;["//* The default y-multiplier for scaling */;iA;@;0;
[ o;;iB;@;"!default;"default-scale-y;o:Sass::Script::Variable	;iB;@;"default-scale-x:@underscored_name"default_scale_x;
[ o;;i ;["//* The default z-multiplier for scaling */;iC;@;0;
[ o;;iD;@;"!default;"default-scale-z;o;	;iD;@;"default-scale-x;"default_scale_x;
[ o;;i ;["*/* The default angle for rotations */;iG;@;0;
[ o;;iH;@;"!default;"default-rotate;o;;["deg;i2;"
45deg;iH;@;[ ;
[ o;;i ;["</* The default x-vector for the axis of 3d rotations */;iK;@;0;
[ o;;iL;@;"!default;"default-vector-x;o;;[ ;i;"1;iL;@;@R;
[ o;;i ;["</* The default y-vector for the axis of 3d rotations */;iM;@;0;
[ o;;iN;@;"!default;"default-vector-y;o;;[ ;i;"1;iN;@;@R;
[ o;;i ;["</* The default z-vector for the axis of 3d rotations */;iO;@;0;
[ o;;iP;@;"!default;"default-vector-z;o;;[ ;i;"1;iP;@;@R;
[ o;;i ;["0/* The default x-length for translations */;iS;@;0;
[ o;;iT;@;"!default;"default-translate-x;o;;["em;i;"1em;iT;@;[ ;
[ o;;i ;["0/* The default y-length for translations */;iU;@;0;
[ o;;iV;@;"!default;"default-translate-y;o;	;iV;@;"default-translate-x;"default_translate_x;
[ o;;i ;["0/* The default z-length for translations */;iW;@;0;
[ o;;iX;@;"!default;"default-translate-z;o;	;iX;@;"default-translate-x;"default_translate_x;
[ o;;i ;["*/* The default x-angle for skewing */;i[;@;0;
[ o;;i\;@;"!default;"default-skew-x;o;;["deg;i
;"	5deg;i\;@;[ ;
[ o;;i ;["*/* The default y-angle for skewing */;i];@;0;
[ o;;i^;@;"!default;"default-skew-y;o;;["deg;i
;"	5deg;i^;@;[ ;
[ o;;i ;["/* **Transform-origin**
 * Transform-origin sent as a complete string
 *
 *     @include apply-origin( origin [, 3D-only ] )
 *
 * where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
 * in percentages, absolute (px, cm, in, em etc..) or relative
 * (left, top, right, bottom, center) units
 *
 * @param only3d Set this to true to only apply this
 * mixin where browsers have 3D support. */;ia;@;0;
[ o:Sass::Tree::MixinDefNode:
@args[[o;;@;"origin;"origin0[o;;@;"only3d;"only3d0;il;@;"apply-origin;	T;
[o;;im;@;0;"only3d;o:Sass::Script::Operation
:@operand2o;
;o;;[ ;i;"2;im;@;@R;im;@:@operand1o:Sass::Script::Funcall
;[o; 
;[o;	;im;@;"origin;"origin;im;@;"-compass-list:@keywords{ ;im;@;"-compass-list-size;!{ :@operator:gt;im;@;o;	;im;@;"only3d;"only3d;":or;
[ u:Sass::Tree::IfNode [o:Sass::Script::Variable	:
@linein:@options{ :
@name"only3d:@underscored_name"only3du:Sass::Tree::IfNodeÚ[00[o:Sass::Tree::MixinNode:
@args[o:Sass::Script::String	:
@type:identifier:@value"transform-origin:
@lineis:@options{ o:Sass::Script::Variable	;is;@:
@name"origin:@underscored_name"origino;	;;	;
"	-moz;it;@o;	;;	;
"-webkit;it;@o;	;;	;
"-o;it;@o;	;;	;
"-ms;it;@o:!Sass::Script::UnaryOperation	;it;@:@operando;	;;	;
"-khtml;it;@:@operator:noto;	;;	;
"official;it;@;iu;@;"experimental:@children[ :@keywords{ [o:Sass::Tree::MixinNode:
@args[o:Sass::Script::String	:
@type:identifier:@value"transform-origin;io;@o; 	;io;@;"origin;	"origino:!Sass::Script::UnaryOperation	;ip;@:@operando;	;;;"	-moz;ip;@:@operator:noto;	;;;"-webkit;ip;@o;	;ip;@;o;	;;;"-o;ip;@;;o;	;ip;@;o;	;;;"-ms;ip;@;;o;	;ip;@;o;	;;;"-khtml;ip;@;;o;	;;;"official;ip;@;iq;@;"experimental:@children[ :@keywords{ o;;i ;["#/* Transform-origin sent as individual arguments:
 *
 *     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
 *
 * where the 3 'origin-' arguments represent x/y/z coordinates.
 *
 * **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support */;iy;@;0;
[ o;;[	[o;;@;"origin-x;"origin_xo;	;i|;@;"default-origin-x;"default_origin_x[o;;@;"origin-y;"origin_yo;	;i};@;"default-origin-y;"default_origin_y[o;;@;"origin-z;"origin_zo:Sass::Script::Bool;F;i~;@[o;;@;"only3d;"only3do; 
;[o;	;i;@;"origin-z;"origin_zo;&;T;i;@o;&;F;i;@;i;@;"if;!{ ;i;@;"transform-origin;	T;
[o;;i;@;0;"origin;o; 
;[o:Sass::Script::String	:
@type:string;" ;i;@;i;@;"unquote;!{ ;
[ u;%[o:Sass::Script::Operation
:@operand2o:Sass::Script::Variable	:
@linei:@options{ :
@name"origin-z:@underscored_name"origin_z;i;	@:@operand1o; 
;o;	;i;	@;
"origin-y;"origin_y;i;	@;o;	;i;	@;
"origin-x;"origin_x:@operator:or;;0[	u:Sass::Tree::IfNode¾[o:Sass::Script::Variable	:
@linei:@options{ :
@name"origin-x:@underscored_name"origin_xu:Sass::Tree::IfNodeÐ[00[o:Sass::Tree::VariableNode:
@linei:@options{ :@guarded0:
@name"origin:
@expro:Sass::Script::Number:@numerator_units["%:@valuei7:@original"50%;i;@:@denominator_units[ :@children[ [o:Sass::Tree::VariableNode;i;@:@guarded0;"origin:
@expro; 	;i;@;"origin-x;	"origin_x:@children[ u;Þ[o:Sass::Script::Variable	:
@linei:@options{ :
@name"origin-y:@underscored_name"origin_yu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNoder[o:Sass::Script::Variable	:
@linei:@options{ :
@name"origin-z:@underscored_name"origin_z0[o:Sass::Tree::VariableNode;i;@:@guarded0;"origin:
@expro:Sass::Script::List	:@value[o; 	;i;@;"origin;	"origino:Sass::Script::Number:@numerator_units["%;i7:@original"50%;i;@:@denominator_units[ ;i;@:@separator:
space:@children[ [o:Sass::Tree::VariableNode;i;@:@guarded0;"origin:
@expro:Sass::Script::List	:@value[o; 	;i;@;"origin;	"origino; 	;i;@;"origin-y;	"origin_y;i;@:@separator:
space:@children[ u;5[o:Sass::Script::Variable	:
@linei:@options{ :
@name"origin-z:@underscored_name"origin_z0[o:Sass::Tree::VariableNode;i;@:@guarded0;"origin:
@expro:Sass::Script::List	:@value[o; 	;i;@;"origin;	"origino; 	;i;@;"origin-z;	"origin_z;i;@:@separator:
space:@children[ o:Sass::Tree::MixinNode:
@args[o;	;i;	@;
"origin;"origino;	;i;	@;
"only3d;"only3d;i;	@;
"apply-origin:@children[ :@keywords{ o;;i ;["¹/* Transform sent as a complete string:
 *
 *     @include transform( transforms [, 3D-only ] )
 *
 * where 'transforms' is a space separated list of all the transforms to be applied */;i;@;0;
[ o;;[[o;;@;"transform;"transform0[o;;@;"only3d;"only3do;&;F;i;@;i;@;"transform;	T;
[u;%6[o:Sass::Script::Variable	:
@linei:@options{ :
@name"only3d:@underscored_name"only3du:Sass::Tree::IfNodeã[00[o:Sass::Tree::MixinNode:
@args[o:Sass::Script::String	:
@type:identifier:@value"transform:
@linei:@options{ o:Sass::Script::Variable	;i;@:
@name"transform:@underscored_name"transformo;	;;	;
"	-moz;i;@o;	;;	;
"-webkit;i;@o;	;;	;
"-o;i;@o;	;;	;
"-ms;i;@o:!Sass::Script::UnaryOperation	;i;@:@operando;	;;	;
"-khtml;i;@:@operator:noto;	;;	;
"official;i;@;i;@;"experimental:@children[ :@keywords{ [o:Sass::Tree::MixinNode:
@args[o:Sass::Script::String	:
@type:identifier:@value"transform;i;@o; 	;i;@;"transform;	"transformo:!Sass::Script::UnaryOperation	;i;@:@operando;	;;;"	-moz;i;@:@operator:noto;	;;;"-webkit;i;@o;	;i;@;o;	;;;"-o;i;@;;o;	;i;@;o;	;;;"-ms;i;@;;o;	;i;@;o;	;;;"-khtml;i;@;;o;	;;;"official;i;@;i;@;"experimental:@children[ :@keywords{ o;;i ;["D/* Shortcut to target all browsers with 2D transform support */;i;@;0;
[ o;;[[o;;@;"
trans;"
trans0;i ;@;"transform2d;	T;
[o:Sass::Tree::MixinNode;[o;	;i¡;@;"
trans;"
transo;&;F;i¡;@;i¡;@;"transform;
[ ;!{ o;;i ;["E/* Shortcut to target only browsers with 3D transform support */;i¤;@;0;
[ o;;[[o;;@;"
trans;"
trans0;i¥;@;"transform3d;	T;
[o;*;[o;	;i¦;@;"
trans;"
transo;&;T;i¦;@;i¦;@;"transform;
[ ;!{ o;;i ;["m/* @doc off
 * 3D Parameters -------------------------------------------------------------
 * @doc on */;i©;@;0;
[ o;;i ;["`/* Set the perspective of 3D transforms on the children of an element:
 *
 *      @include perspective( perspective )
 *
 * where 'perspective' is a uniless number representing the depth of the z-axis
 * the higher the perspective, the more exagerated the foreshortening.
 * values from 500 to 1000 are more-or-less "normal" - a good starting-point. */;i­;@;0;
[ o;;[[o;;@;"p;"p0;i´;@;"perspective;	T;
[o;*;[o;'	;(:identifier;"perspective;iµ;@o;	;iµ;@;"p;"po:!Sass::Script::UnaryOperation	;i¶;@:@operando;'	;(;+;"	-moz;i¶;@;":noto;'	;(;+;"-webkit;i¶;@o;,	;i¶;@;-o;'	;(;+;"-o;i¶;@;";.o;,	;i¶;@;-o;'	;(;+;"-ms;i¶;@;";.o;,	;i¶;@;-o;'	;(;+;"-khtml;i¶;@;";.o;'	;(;+;"official;i¶;@;i·;@;"experimental;
[ ;!{ o;;i ;["¥/* Set the origin position for the perspective
 *
 *      @include perspective-origin(origin-x [origin-y])
 *
 * where the two arguments represent x/y coordinates */;iº;@;0;
[ o;;[[o;;@;"origin;"origino;;["%;i7;"50%;i¿;@;[ ;i¿;@;"perspective-origin;	T;
[o;*;[o;'	;(;+;"perspective-origin;iÀ;@o;	;iÀ;@;"origin;"origino;,	;iÁ;@;-o;'	;(;+;"	-moz;iÁ;@;";.o;'	;(;+;"-webkit;iÁ;@o;,	;iÁ;@;-o;'	;(;+;"-o;iÁ;@;";.o;,	;iÁ;@;-o;'	;(;+;"-ms;iÁ;@;";.o;,	;iÁ;@;-o;'	;(;+;"-khtml;iÁ;@;";.o;'	;(;+;"official;iÁ;@;iÂ;@;"experimental;
[ ;!{ o;;i ;["÷/* Determine whether a 3D objects children also live in the given 3D space
 *
 *      @include transform-style( [ style ] )
 *
 * where `style` can be either `flat` or `preserve-3d`
 * browsers default to `flat`, mixin defaults to `preserve-3d` */;iÅ;@;0;
[ o;;[[o;;@;"
style;"
styleo;'	;(;+;"preserve-3d;iË;@;iË;@;"transform-style;	T;
[o;*;[o;'	;(;+;"transform-style;iÌ;@o;	;iÌ;@;"
style;"
styleo;,	;iÍ;@;-o;'	;(;+;"	-moz;iÍ;@;";.o;'	;(;+;"-webkit;iÍ;@o;,	;iÍ;@;-o;'	;(;+;"-o;iÍ;@;";.o;,	;iÍ;@;-o;'	;(;+;"-ms;iÍ;@;";.o;,	;iÍ;@;-o;'	;(;+;"-khtml;iÍ;@;";.o;'	;(;+;"official;iÍ;@;iÎ;@;"experimental;
[ ;!{ o;;i ;["ô/* Determine the visibility of an element when it's back is turned
 *
 *     @include backface-visibility( [ visibility ] )
 *
 * where `visibility` can be either `visible` or `hidden`
 * browsers default to visible, mixin defaults to hidden */;iÑ;@;0;
[ o;;[[o;;@;"visibility;"visibilityo;'	;(;+;"hidden;i×;@;i×;@;"backface-visibility;	T;
[o;*;[o;'	;(;+;"backface-visibility;iØ;@o;	;iØ;@;"visibility;"visibilityo;,	;iÙ;@;-o;'	;(;+;"	-moz;iÙ;@;";.o;'	;(;+;"-webkit;iÙ;@o;,	;iÙ;@;-o;'	;(;+;"-o;iÙ;@;";.o;,	;iÙ;@;-o;'	;(;+;"-ms;iÙ;@;";.o;,	;iÙ;@;-o;'	;(;+;"-khtml;iÙ;@;";.o;'	;(;+;"official;iÙ;@;iÚ;@;"experimental;
[ ;!{ o;;i ;["S/* @doc off
 * Transform Partials --------------------------------------------------------
 * These work well on their own, but they don't add to each other, they override.
 * Use along with transform parameter mixins to adjust origin, perspective and style
 * --------------------------------------------------------------------------- */;iÝ;@;0;
[ o;;i ;["a/* Scale ---------------------------------------------------------------------
 * @doc on */;iä;@;0;
[ o;;i ;["¾/* Scale an object along the x and y axis:
 *
 *      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
 *
 * where the 'scale-' arguments are unitless multipliers of the x and y dimensions
 * and perspective, which works the same as the stand-alone perspective property/mixin
 * but applies to the individual element (multiplied with any parent perspective)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iç;@;0;
[ o;;[	[o;;@;"scale-x;"scale_xo;	;iñ;@;"default-scale-x;"default_scale_x[o;;@;"scale-y;"scale_yo;	;iò;@;"scale-x;"scale_x[o;;@;"perspective;"perspectiveo;&;F;ió;@[o;;@;"only3d;"only3do;&;F;iô;@;iõ;@;"
scale;	T;
[o;;iö;@;0;"
trans;o; 
;[o;	;iö;@;"scale-x;"scale_xo;	;iö;@;"scale-y;"scale_y;iö;@;"
scale;!{ ;
[ u;%[o:Sass::Script::Variable	:
@linei÷:@options{ :
@name"perspective:@underscored_name"perspective0[o:Sass::Tree::VariableNode;i÷;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:
@args[o; 	;i÷;@;"perspective;	"perspective;i÷;@;"perspective:@keywords{ o; 	;i÷;@;"
trans;	"
trans;i÷;@:@separator:
space:@children[ o;*;[o;	;iø;@;"
trans;"
transo;	;iø;@;"only3d;"only3d;iø;@;"transform;
[ ;!{ o;;i ;["¨/* Scale an object along the x axis
 * @include scaleX( [ scale-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iû;@;0;
[ o;;[[o;;@;"
scale;"
scaleo;	;i ;@;"default-scale-x;"default_scale_x[o;;@;"perspective;"perspectiveo;&;F;i;@[o;;@;"only3d;"only3do;&;F;i;@;i;@;"scaleX;	T;
[o;;i;@;0;"
trans;o; 
;[o;	;i;@;"
scale;"
scale;i;@;"scaleX;!{ ;
[ u;%[o:Sass::Script::Variable	:
@linei:@options{ :
@name"perspective:@underscored_name"perspective0[o:Sass::Tree::VariableNode;i;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:
@args[o; 	;i;@;"perspective;	"perspective;i;@;"perspective:@keywords{ o; 	;i;@;"
trans;	"
trans;i;@:@separator:
space:@children[ o;*;[o;	;i;@;"
trans;"
transo;	;i;@;"only3d;"only3d;i;@;"transform;
[ ;!{ o;;i ;["¨/* Scale an object along the y axis
 * @include scaleY( [ scale-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i	;@;0;
[ o;;[[o;;@;"
scale;"
scaleo;	;i;@;"default-scale-y;"default_scale_y[o;;@;"perspective;"perspectiveo;&;F;i;@[o;;@;"only3d;"only3do;&;F;i;@;i;@;"scaleY;	T;
[o;;i;@;0;"
trans;o; 
;[o;	;i;@;"
scale;"
scale;i;@;"scaleY;!{ ;
[ u;%[o:Sass::Script::Variable	:
@linei:@options{ :
@name"perspective:@underscored_name"perspective0[o:Sass::Tree::VariableNode;i;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:
@args[o; 	;i;@;"perspective;	"perspective;i;@;"perspective:@keywords{ o; 	;i;@;"
trans;	"
trans;i;@:@separator:
space:@children[ o;*;[o;	;i;@;"
trans;"
transo;	;i;@;"only3d;"only3d;i;@;"transform;
[ ;!{ o;;i ;["/* Scale an object along the z axis
 * @include scaleZ( [ scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i;@;0;
[ o;;[[o;;@;"
scale;"
scaleo;	;i;@;"default-scale-z;"default_scale_z[o;;@;"perspective;"perspectiveo;&;F;i;@;i;@;"scaleZ;	T;
[o;;i;@;0;"
trans;o; 
;[o;	;i;@;"
scale;"
scale;i;@;"scaleZ;!{ ;
[ u;%[o:Sass::Script::Variable	:
@linei :@options{ :
@name"perspective:@underscored_name"perspective0[o:Sass::Tree::VariableNode;i ;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:
@args[o; 	;i ;@;"perspective;	"perspective;i ;@;"perspective:@keywords{ o; 	;i ;@;"
trans;	"
trans;i ;@:@separator:
space:@children[ o;*;[o;	;i!;@;"
trans;"
trans;i!;@;"transform3d;
[ ;!{ o;;i ;["·/* Scale and object along all three axis
 * @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i$;@;0;
[ o;;[	[o;;@;"scale-x;"scale_xo;	;i);@;"default-scale-x;"default_scale_x[o;;@;"scale-y;"scale_yo;	;i*;@;"default-scale-y;"default_scale_y[o;;@;"scale-z;"scale_zo;	;i+;@;"default-scale-z;"default_scale_z[o;;@;"perspective;"perspectiveo;&;F;i,;@;i-;@;"scale3d;	T;
[o;;i.;@;0;"
trans;o; 
;[o;	;i.;@;"scale-x;"scale_xo;	;i.;@;"scale-y;"scale_yo;	;i.;@;"scale-z;"scale_z;i.;@;"scale3d;!{ ;
[ u;%[o:Sass::Script::Variable	:
@linei/:@options{ :
@name"perspective:@underscored_name"perspective0[o:Sass::Tree::VariableNode;i/;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:
@args[o; 	;i/;@;"perspective;	"perspective;i/;@;"perspective:@keywords{ o; 	;i/;@;"
trans;	"
trans;i/;@:@separator:
space:@children[ o;*;[o;	;i0;@;"
trans;"
trans;i0;@;"transform3d;
[ ;!{ o;;i ;["m/* @doc off
 * Rotate --------------------------------------------------------------------
 * @doc on */;i3;@;0;
[ o;;i ;["ü/* Rotate an object around the z axis  (2D)
 * @include rotate( [ rotation, perspective, 3D-only ] )
 * where 'rotation' is an angle set in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i7;@;0;
[ o;;[[o;;@;"rotate;"rotateo;	;i=;@;"default-rotate;"default_rotate[o;;@;"perspective;"perspectiveo;&;F;i>;@[o;;@;"only3d;"only3do;&;F;i?;@;i@;@;"rotate;	T;
[o;;iA;@;0;"
trans;o; 
;[o;	;iA;@;"rotate;"rotate;iA;@;"rotate;!{ ;
[ u;%[o:Sass::Script::Variable	:
@lineiB:@options{ :
@name"perspective:@underscored_name"perspective0[o:Sass::Tree::VariableNode;iB;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:
@args[o; 	;iB;@;"perspective;	"perspective;iB;@;"perspective:@keywords{ o; 	;iB;@;"
trans;	"
trans;iB;@:@separator:
space:@children[ o;*;[o;	;iC;@;"
trans;"
transo;	;iC;@;"only3d;"only3d;iC;@;"transform;
[ ;!{ o;;i ;["/* A longcut for 'rotate' in case you forget that 'z' is implied
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iF;@;0;
[ o;;[[o;;@;"rotate;"rotateo;	;iJ;@;"default-rotate;"default_rotate[o;;@;"perspective;"perspectiveo;&;F;iK;@[o;;@;"only3d;"only3do;&;F;iL;@;iM;@;"rotateZ;	T;
[o;*;[o;	;iN;@;"rotate;"rotateo;	;iN;@;"perspective;"perspectiveo;	;iN;@;"only3d;"only3d;iN;@;"rotate;
[ ;!{ o;;i ;["¨/* Rotate an object around the x axis (3D)
 * @include rotateX( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iQ;@;0;
[ o;;[[o;;@;"rotate;"rotateo;	;iV;@;"default-rotate;"default_rotate[o;;@;"perspective;"perspectiveo;&;F;iW;@;iX;@;"rotateX;	T;
[o;;iY;@;0;"
trans;o; 
;[o;	;iY;@;"rotate;"rotate;iY;@;"rotateX;!{ ;
[ u;%[o:Sass::Script::Variable	:
@lineiZ:@options{ :
@name"perspective:@underscored_name"perspective0[o:Sass::Tree::VariableNode;iZ;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:
@args[o; 	;iZ;@;"perspective;	"perspective;iZ;@;"perspective:@keywords{ o; 	;iZ;@;"
trans;	"
trans;iZ;@:@separator:
space:@children[ o;*;[o;	;i[;@;"
trans;"
trans;i[;@;"transform3d;
[ ;!{ o;;i ;["§/* Rotate an object around the y axis (3D)
 * @include rotate( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i^;@;0;
[ o;;[[o;;@;"rotate;"rotateo;	;ic;@;"default-rotate;"default_rotate[o;;@;"perspective;"perspectiveo;&;F;id;@;ie;@;"rotateY;	T;
[o;;if;@;0;"
trans;o; 
;[o;	;if;@;"rotate;"rotate;if;@;"rotateY;!{ ;
[ u;%[o:Sass::Script::Variable	:
@lineig:@options{ :
@name"perspective:@underscored_name"perspective0[o:Sass::Tree::VariableNode;ig;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:
@args[o; 	;ig;@;"perspective;	"perspective;ig;@;"perspective:@keywords{ o; 	;ig;@;"
trans;	"
trans;ig;@:@separator:
space:@children[ o;*;[o;	;ih;@;"
trans;"
trans;ih;@;"transform3d;
[ ;!{ o;;i ;["¤/* Rotate an object around an arbitrary axis (3D)
 * @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
 * where the 'vector-' arguments accept unitless numbers
 * these numbers are not important on their own, but in relation to one another
 * creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;ik;@;0;
[ o;;[
[o;;@;"vector-x;"vector_xo;	;is;@;"default-vector-x;"default_vector_x[o;;@;"vector-y;"vector_yo;	;it;@;"default-vector-y;"default_vector_y[o;;@;"vector-z;"vector_zo;	;iu;@;"default-vector-z;"default_vector_z[o;;@;"rotate;"rotateo;	;iv;@;"default-rotate;"default_rotate[o;;@;"perspective;"perspectiveo;&;F;iw;@;ix;@;"rotate3d;	T;
[o;;iy;@;0;"
trans;o; 
;[	o;	;iy;@;"vector-x;"vector_xo;	;iy;@;"vector-y;"vector_yo;	;iy;@;"vector-z;"vector_zo;	;iy;@;"rotate;"rotate;iy;@;"rotate3d;!{ ;
[ u;%[o:Sass::Script::Variable	:
@lineiz:@options{ :
@name"perspective:@underscored_name"perspective0[o:Sass::Tree::VariableNode;iz;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:
@args[o; 	;iz;@;"perspective;	"perspective;iz;@;"perspective:@keywords{ o; 	;iz;@;"
trans;	"
trans;iz;@:@separator:
space:@children[ o;*;[o;	;i{;@;"
trans;"
trans;i{;@;"transform3d;
[ ;!{ o;;i ;["m/* @doc off
 * Translate -----------------------------------------------------------------
 * @doc on */;i~;@;0;
[ o;;i ;["5/* Move an object along the x or y axis (2D)
 * @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
 * where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i;@;0;
[ o;;[	[o;;@;"translate-x;"translate_xo;	;i;@;"default-translate-x;"default_translate_x[o;;@;"translate-y;"translate_yo;	;i;@;"default-translate-y;"default_translate_y[o;;@;"perspective;"perspectiveo;&;F;i;@[o;;@;"only3d;"only3do;&;F;i;@;i;@;"translate;	T;
[o;;i;@;0;"
trans;o; 
;[o;	;i;@;"translate-x;"translate_xo;	;i;@;"translate-y;"translate_y;i;@;"translate;!{ ;
[ u;%[o:Sass::Script::Variable	:
@linei:@options{ :
@name"perspective:@underscored_name"perspective0[o:Sass::Tree::VariableNode;i;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:
@args[o; 	;i;@;"perspective;	"perspective;i;@;"perspective:@keywords{ o; 	;i;@;"
trans;	"
trans;i;@:@separator:
space:@children[ o;*;[o;	;i;@;"
trans;"
transo;	;i;@;"only3d;"only3d;i;@;"transform;
[ ;!{ o;;i ;["³/* Move an object along the x axis (2D)
 * @include translate( [ translate-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i;@;0;
[ o;;[[o;;@;"trans-x;"trans_xo;	;i;@;"default-translate-x;"default_translate_x[o;;@;"perspective;"perspectiveo;&;F;i;@[o;;@;"only3d;"only3do;&;F;i;@;i;@;"translateX;	T;
[o;;i;@;0;"
trans;o; 
;[o;	;i;@;"trans-x;"trans_x;i;@;"translateX;!{ ;
[ u;%[o:Sass::Script::Variable	:
@linei:@options{ :
@name"perspective:@underscored_name"perspective0[o:Sass::Tree::VariableNode;i;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:
@args[o; 	;i;@;"perspective;	"perspective;i;@;"perspective:@keywords{ o; 	;i;@;"
trans;	"
trans;i;@:@separator:
space:@children[ o;*;[o;	;i;@;"
trans;"
transo;	;i;@;"only3d;"only3d;i;@;"transform;
[ ;!{ o;;i ;["³/* Move an object along the y axis (2D)
 * @include translate( [ translate-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;@;0;
[ o;;[[o;;@;"trans-y;"trans_yo;	;i¥;@;"default-translate-y;"default_translate_y[o;;@;"perspective;"perspectiveo;&;F;i¦;@[o;;@;"only3d;"only3do;&;F;i§;@;i¨;@;"translateY;	T;
[o;;i©;@;0;"
trans;o; 
;[o;	;i©;@;"trans-y;"trans_y;i©;@;"translateY;!{ ;
[ u;%[o:Sass::Script::Variable	:
@lineiª:@options{ :
@name"perspective:@underscored_name"perspective0[o:Sass::Tree::VariableNode;iª;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:
@args[o; 	;iª;@;"perspective;	"perspective;iª;@;"perspective:@keywords{ o; 	;iª;@;"
trans;	"
trans;iª;@:@separator:
space:@children[ o;*;[o;	;i«;@;"
trans;"
transo;	;i«;@;"only3d;"only3d;i«;@;"transform;
[ ;!{ o;;i ;["ª/* Move an object along the z axis (3D)
 * @include translate( [ translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i®;@;0;
[ o;;[[o;;@;"trans-z;"trans_zo;	;i³;@;"default-translate-z;"default_translate_z[o;;@;"perspective;"perspectiveo;&;F;i´;@;iµ;@;"translateZ;	T;
[o;;i¶;@;0;"
trans;o; 
;[o;	;i¶;@;"trans-z;"trans_z;i¶;@;"translateZ;!{ ;
[ u;%[o:Sass::Script::Variable	:
@linei·:@options{ :
@name"perspective:@underscored_name"perspective0[o:Sass::Tree::VariableNode;i·;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:
@args[o; 	;i·;@;"perspective;	"perspective;i·;@;"perspective:@keywords{ o; 	;i·;@;"
trans;	"
trans;i·;@:@separator:
space:@children[ o;*;[o;	;i¸;@;"
trans;"
trans;i¸;@;"transform3d;
[ ;!{ o;;i ;["Í/* Move an object along the x, y and z axis (3D)
 * @include translate( [ translate-x, translate-y, translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i»;@;0;
[ o;;[	[o;;@;"translate-x;"translate_xo;	;iÀ;@;"default-translate-x;"default_translate_x[o;;@;"translate-y;"translate_yo;	;iÁ;@;"default-translate-y;"default_translate_y[o;;@;"translate-z;"translate_zo;	;iÂ;@;"default-translate-z;"default_translate_z[o;;@;"perspective;"perspectiveo;&;F;iÃ;@;iÄ;@;"translate3d;	T;
[o;;iÅ;@;0;"
trans;o; 
;[o;	;iÅ;@;"translate-x;"translate_xo;	;iÅ;@;"translate-y;"translate_yo;	;iÅ;@;"translate-z;"translate_z;iÅ;@;"translate3d;!{ ;
[ u;%[o:Sass::Script::Variable	:
@lineiÆ:@options{ :
@name"perspective:@underscored_name"perspective0[o:Sass::Tree::VariableNode;iÆ;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:
@args[o; 	;iÆ;@;"perspective;	"perspective;iÆ;@;"perspective:@keywords{ o; 	;iÆ;@;"
trans;	"
trans;iÆ;@:@separator:
space:@children[ o;*;[o;	;iÇ;@;"
trans;"
trans;iÇ;@;"transform3d;
[ ;!{ o;;i ;["m/* @doc off
 * Skew ----------------------------------------------------------------------
 * @doc on */;iÊ;@;0;
[ o;;i ;["ò/* Skew an element:
 *
 *     @include skew( [ skew-x, skew-y, 3D-only ] )
 *
 * where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iÎ;@;0;
[ o;;[[o;;@;"skew-x;"skew_xo;	;iÖ;@;"default-skew-x;"default_skew_x[o;;@;"skew-y;"skew_yo;	;i×;@;"default-skew-y;"default_skew_y[o;;@;"only3d;"only3do;&;F;iØ;@;iÙ;@;"	skew;	T;
[o;;iÚ;@;0;"
trans;o; 
;[o;	;iÚ;@;"skew-x;"skew_xo;	;iÚ;@;"skew-y;"skew_y;iÚ;@;"	skew;!{ ;
[ o;*;[o;	;iÛ;@;"
trans;"
transo;	;iÛ;@;"only3d;"only3d;iÛ;@;"transform;
[ ;!{ o;;i ;["/* Skew an element along the x axiz
 *
 *     @include skew( [ skew-x, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iÞ;@;0;
[ o;;[[o;;@;"skew-x;"skew_xo;	;iä;@;"default-skew-x;"default_skew_x[o;;@;"only3d;"only3do;&;F;iå;@;iæ;@;"
skewX;	T;
[o;;iç;@;0;"
trans;o; 
;[o;	;iç;@;"skew-x;"skew_x;iç;@;"
skewX;!{ ;
[ o;*;[o;	;iè;@;"
trans;"
transo;	;iè;@;"only3d;"only3d;iè;@;"transform;
[ ;!{ o;;i ;["/* Skew an element along the y axis
 *
 *     @include skew( [ skew-y, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;ië;@;0;
[ o;;[[o;;@;"skew-y;"skew_yo;	;iñ;@;"default-skew-y;"default_skew_y[o;;@;"only3d;"only3do;&;F;iò;@;ió;@;"
skewY;	T;
[o;;iô;@;0;"
trans;o; 
;[o;	;iô;@;"skew-y;"skew_y;iô;@;"
skewY;!{ ;
[ o;*;[o;	;iõ;@;"
trans;"
transo;	;iõ;@;"only3d;"only3d;iõ;@;"transform;
[ ;!{ o;;i ;["/* Full transform mixins
 * For settings any combination of transforms as arguments
 * These are complex and not highly recommended for daily use
 * They are mainly here for backwards-compatability purposes
 *
 * * they include origin adjustments
 * * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iù;@;0;
[ o;;[[o;;@;"perspective;"perspectiveo;&;F;i;@[o;;@;"scale-x;"scale_xo;&;F;i;@[o;;@;"scale-y;"scale_yo;&;F;i;@[o;;@;"scale-z;"scale_zo;&;F;i;@[o;;@;"rotate-x;"rotate_xo;&;F;i;@[o;;@;"rotate-y;"rotate_yo;&;F;i;@[o;;@;"rotate-z;"rotate_zo;&;F;i	;@[o;;@;"rotate3d;"rotate3do;&;F;i
;@[o;;@;"trans-x;"trans_xo;&;F;i;@[o;;@;"trans-y;"trans_yo;&;F;i;@[o;;@;"trans-z;"trans_zo;&;F;i;@[o;;@;"skew-x;"skew_xo;&;F;i;@[o;;@;"skew-y;"skew_yo;&;F;i;@[o;;@;"origin-x;"origin_xo;&;F;i;@[o;;@;"origin-y;"origin_yo;&;F;i;@[o;;@;"origin-z;"origin_zo;&;F;i;@[o;;@;"only3d;"only3do;&;F;i;@;i;@;"create-transform;	T;
[o;;i;@;0;"
trans;o; 
;[o;'	;(;);" ;i;@;i;@;"unquote;!{ ;
[ o;;i ;["/* perspective */;i;@;0;
[ u;%.[o:Sass::Script::Variable	:
@linei:@options{ :
@name"perspective:@underscored_name"perspective0[o:Sass::Tree::VariableNode;i;@:@guarded0;"
trans:
@expro:Sass::Script::Funcall
:
@args[o; 	;i;@;"perspective;	"perspective;i;@;"perspective:@keywords{ :@children[ o;;i ;["/* scale */;i;@;0;
[ u;%Ê[o:Sass::Script::Operation
:@operand2o:Sass::Script::Variable	:
@linei:@options{ :
@name"scale-y:@underscored_name"scale_y;i;	@:@operand1o;	;i;	@;
"scale-x;"scale_x:@operator:andu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodev[o:Sass::Script::Variable	:
@linei:@options{ :
@name"scale-x:@underscored_name"scale_x0[o:Sass::Tree::VariableNode;i;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;i;@;"
trans;	"
transo:Sass::Script::Funcall
:
@args[o; 	;i;@;"scale-x;	"scale_x;i;@;"scaleX:@keywords{ ;i;@:@separator:
space:@children[ u; v[o:Sass::Script::Variable	:
@linei :@options{ :
@name"scale-y:@underscored_name"scale_y0[o:Sass::Tree::VariableNode;i ;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;i ;@;"
trans;	"
transo:Sass::Script::Funcall
:
@args[o; 	;i ;@;"scale-y;	"scale_y;i ;@;"scaleY:@keywords{ ;i ;@:@separator:
space:@children[ u; v[o:Sass::Script::Variable	:
@linei!:@options{ :
@name"scale-z:@underscored_name"scale_z0[o:Sass::Tree::VariableNode;i!;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;i!;@;"
trans;	"
transo:Sass::Script::Funcall
:
@args[o; 	;i!;@;"scale-z;	"scale_z;i!;@;"scaleZ:@keywords{ ;i!;@:@separator:
space:@children[ [u;L[o:Sass::Script::Variable	:
@linei:@options{ :
@name"scale-z:@underscored_name"scale_zu:Sass::Tree::IfNodev[00[o:Sass::Tree::VariableNode:
@linei:@options{ :@guarded0:
@name"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Variable	;i;@;	"
trans:@underscored_name"
transo:Sass::Script::Funcall
:
@args[o;	;i;@;	"scale-x;"scale_xo;	;i;@;	"scale-y;"scale_y;i;@;	"
scale:@keywords{ ;i;@:@separator:
space:@children[ [o:Sass::Tree::VariableNode;i;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;i;@;"
trans;	"
transo:Sass::Script::Funcall
:
@args[o; 	;i;@;"scale-x;	"scale_xo; 	;i;@;"scale-y;	"scale_yo; 	;i;@;"scale-z;	"scale_z;i;@;"scale3d:@keywords{ ;i;@:@separator:
space:@children[ o;;i ;["/* rotate */;i$;@;0;
[ u;%{[o:Sass::Script::Variable	:
@linei%:@options{ :
@name"rotate-x:@underscored_name"rotate_x0[o:Sass::Tree::VariableNode;i%;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;i%;@;"
trans;	"
transo:Sass::Script::Funcall
:
@args[o; 	;i%;@;"rotate-x;	"rotate_x;i%;@;"rotateX:@keywords{ ;i%;@:@separator:
space:@children[ u;%{[o:Sass::Script::Variable	:
@linei&:@options{ :
@name"rotate-y:@underscored_name"rotate_y0[o:Sass::Tree::VariableNode;i&;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;i&;@;"
trans;	"
transo:Sass::Script::Funcall
:
@args[o; 	;i&;@;"rotate-y;	"rotate_y;i&;@;"rotateY:@keywords{ ;i&;@:@separator:
space:@children[ u;%{[o:Sass::Script::Variable	:
@linei':@options{ :
@name"rotate-z:@underscored_name"rotate_z0[o:Sass::Tree::VariableNode;i';@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;i';@;"
trans;	"
transo:Sass::Script::Funcall
:
@args[o; 	;i';@;"rotate-z;	"rotate_z;i';@;"rotateZ:@keywords{ ;i';@:@separator:
space:@children[ u;%|[o:Sass::Script::Variable	:
@linei(:@options{ :
@name"rotate3d:@underscored_name"rotate3d0[o:Sass::Tree::VariableNode;i(;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;i(;@;"
trans;	"
transo:Sass::Script::Funcall
:
@args[o; 	;i(;@;"rotate3d;	"rotate3d;i(;@;"rotate3d:@keywords{ ;i(;@:@separator:
space:@children[ o;;i ;["/* translate */;i*;@;0;
[ u;%Þ[o:Sass::Script::Operation
:@operand2o:Sass::Script::Variable	:
@linei+:@options{ :
@name"trans-y:@underscored_name"trans_y;i+;	@:@operand1o;	;i+;	@;
"trans-x;"trans_x:@operator:andu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodez[o:Sass::Script::Variable	:
@linei/:@options{ :
@name"trans-x:@underscored_name"trans_x0[o:Sass::Tree::VariableNode;i/;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;i/;@;"
trans;	"
transo:Sass::Script::Funcall
:
@args[o; 	;i/;@;"trans-x;	"trans_x;i/;@;"translateX:@keywords{ ;i/;@:@separator:
space:@children[ u; z[o:Sass::Script::Variable	:
@linei0:@options{ :
@name"trans-y:@underscored_name"trans_y0[o:Sass::Tree::VariableNode;i0;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;i0;@;"
trans;	"
transo:Sass::Script::Funcall
:
@args[o; 	;i0;@;"trans-y;	"trans_y;i0;@;"translateY:@keywords{ ;i0;@:@separator:
space:@children[ u; z[o:Sass::Script::Variable	:
@linei1:@options{ :
@name"trans-z:@underscored_name"trans_z0[o:Sass::Tree::VariableNode;i1;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;i1;@;"
trans;	"
transo:Sass::Script::Funcall
:
@args[o; 	;i1;@;"trans-z;	"trans_z;i1;@;"translateZ:@keywords{ ;i1;@:@separator:
space:@children[ [u;T[o:Sass::Script::Variable	:
@linei,:@options{ :
@name"trans-z:@underscored_name"trans_zu:Sass::Tree::IfNodez[00[o:Sass::Tree::VariableNode:
@linei-:@options{ :@guarded0:
@name"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Variable	;i-;@;	"
trans:@underscored_name"
transo:Sass::Script::Funcall
:
@args[o;	;i-;@;	"trans-x;"trans_xo;	;i-;@;	"trans-y;"trans_y;i-;@;	"translate:@keywords{ ;i-;@:@separator:
space:@children[ [o:Sass::Tree::VariableNode;i,;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;i,;@;"
trans;	"
transo:Sass::Script::Funcall
:
@args[o; 	;i,;@;"trans-x;	"trans_xo; 	;i,;@;"trans-y;	"trans_yo; 	;i,;@;"trans-z;	"trans_z;i,;@;"translate3d:@keywords{ ;i,;@:@separator:
space:@children[ o;;i ;["/* skew */;i4;@;0;
[ u;%[o:Sass::Script::Operation
:@operand2o:Sass::Script::Variable	:
@linei5:@options{ :
@name"skew-y:@underscored_name"skew_y;i5;	@:@operand1o;	;i5;	@;
"skew-x;"skew_x:@operator:andu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodeq[o:Sass::Script::Variable	:
@linei7:@options{ :
@name"skew-x:@underscored_name"skew_x0[o:Sass::Tree::VariableNode;i7;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;i7;@;"
trans;	"
transo:Sass::Script::Funcall
:
@args[o; 	;i7;@;"skew-x;	"skew_x;i7;@;"
skewX:@keywords{ ;i7;@:@separator:
space:@children[ u; q[o:Sass::Script::Variable	:
@linei8:@options{ :
@name"skew-y:@underscored_name"skew_y0[o:Sass::Tree::VariableNode;i8;@:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;i8;@;"
trans;	"
transo:Sass::Script::Funcall
:
@args[o; 	;i8;@;"skew-y;	"skew_y;i8;@;"
skewY:@keywords{ ;i8;@:@separator:
space:@children[ [o:Sass::Tree::VariableNode;i5;	@:@guarded0;
"
trans:
@expro:Sass::Script::List	:@value[o;	;i5;	@;
"
trans;"
transo:Sass::Script::Funcall
:
@args[o;	;i5;	@;
"skew-x;"skew_xo;	;i5;	@;
"skew-y;"skew_y;i5;	@;
"	skew:@keywords{ ;i5;	@:@separator:
space:@children[ o;;i ;["/* apply it! */;i;;@;0;
[ o;*;[o;	;i<;@;"
trans;"
transo;	;i<;@;"only3d;"only3d;i<;@;"transform;
[ ;!{ o;*;[	o;	;i=;@;"origin-x;"origin_xo;	;i=;@;"origin-y;"origin_yo;	;i=;@;"origin-z;"origin_zo;	;i=;@;"only3d;"only3d;i=;@;"transform-origin;
[ ;!{ o;;i ;["q/* A simplified set of options
 * backwards-compatible with the previous version of the 'transform' mixin */;iA;@;0;
[ o;;[[o;;@;"
scale;"
scaleo;&;F;iD;@[o;;@;"rotate;"rotateo;&;F;iE;@[o;;@;"trans-x;"trans_xo;&;F;iF;@[o;;@;"trans-y;"trans_yo;&;F;iG;@[o;;@;"skew-x;"skew_xo;&;F;iH;@[o;;@;"skew-y;"skew_yo;&;F;iI;@[o;;@;"origin-x;"origin_xo;&;F;iJ;@[o;;@;"origin-y;"origin_yo;&;F;iK;@;iL;@;"simple-transform;	T;
[o;*;[o;&;F;iN;@o;	;iO;@;"
scale;"
scaleo;	;iO;@;"
scale;"
scaleo;&;F;iO;@o;&;F;iP;@o;&;F;iP;@o;	;iP;@;"rotate;"rotateo;&;F;iP;@o;	;iQ;@;"trans-x;"trans_xo;	;iQ;@;"trans-y;"trans_yo;&;F;iQ;@o;	;iR;@;"skew-x;"skew_xo;	;iR;@;"skew-y;"skew_yo;	;iS;@;"origin-x;"origin_xo;	;iS;@;"origin-y;"origin_yo;&;F;iS;@o;&;F;iT;@;iU;@;"create-transform;
[ ;!{ 